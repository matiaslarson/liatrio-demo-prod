# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow, change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, etc environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - "main"

env:
  PROJECT_NAME: ${{ vars.GKE_PROJECT }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  GKE_REGION: ${{ vars.GKE_REGION }}
  GKE_ZONE: ${{ vars.GKE_ZONE }}
  GKE_SVC_ACCNT: ${{ secrets.GKE_SVC_ACCNT }}
  APP_DOMAIN: ${{ vars.APP_DOMAIN }}
  DEPLOYMENT_NAMESPACE: $ {{ vars.DEPLOYMENT_NAMESPACE }}
  DEPLOYMENT_NAME: xyz-demo
  REPOSITORY: liatrio-demo
  IMAGE: xyz-demo

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GKE_WL_PROVIDER }}
        service_account: ${{ secrets.GKE_SVC_ACCNT }}

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v1'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Login to GAR
      uses: docker/login-action@v2
      with:
        registry: ${{ vars.GAR_LOCATION }}-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: projects/${{ vars.GKE_PROJECT }}/locations/${{ vars.GKE_REGION }}/clusters/${{ vars.GKE_PROJECT }}-autopilot

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_NAME/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_NAME/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.5/kustomize_v4.5.5_linux_amd64.tar.gz | tar -xz
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the variables in the k8s template
        cat <<EOF > ingress_patch.json
        [
          {"op": "replace",
          "path": "/spec/rules/0/host",
          "value": "xyz-app.$APP_DOMAIN"}
        ]
        EOF
        cat <<EOF > cert_patch.json
        [
          {"op": "replace",
          "path": "/spec/domains/0",
          "value": "xyz-app.$APP_DOMAIN"}
        ]
        EOF
        cat <<EOF > namespace_patch.json
        [
          {"op": "replace",
          "path": "/metadata/name",
          "value": "$DEPLOYMENT_NAMESPACE"}
        ]
        EOF
        ./kustomize edit set image xyz-demo=$GAR_LOCATION-docker.pkg.dev/$PROJECT_NAME/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -n $DEPLOYMENT_NAMESPACE -f -
        kubectl rollout status -n $DEPLOYMENT_NAMESPACE deployment/$DEPLOYMENT_NAME
        kubectl get ingress -n $DEPLOYMENT_NAMESPACE -o wide
